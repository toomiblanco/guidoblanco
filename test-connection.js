/**
 * Script de prueba de conexi√≥n a PostgreSQL
 * Ejecutar con: node test-connection.js
 */

const { Pool } = require('pg')
require('dotenv').config({ path: '.env.local' })

const pool = new Pool({
  user: process.env.DB_USER,
  host: process.env.DB_HOST,
  database: process.env.DB_NAME,
  password: process.env.DB_PASSWORD,
  port: parseInt(process.env.DB_PORT || '5432'),
  ssl: false,
})

async function testConnection() {
  console.log('üîç Probando conexi√≥n a PostgreSQL...\n')
  console.log('üìù Configuraci√≥n:')
  console.log(`   Host: ${process.env.DB_HOST}`)
  console.log(`   Puerto: ${process.env.DB_PORT}`)
  console.log(`   Base de datos: ${process.env.DB_NAME}`)
  console.log(`   Usuario: ${process.env.DB_USER}`)
  console.log('')

  try {
    // Test de conexi√≥n b√°sico
    console.log('1Ô∏è‚É£ Probando conexi√≥n b√°sica...')
    const result = await pool.query('SELECT NOW() as now, current_database() as database, version()')
    console.log(`   ‚úÖ Conectado a: ${result.rows[0].database}`)
    console.log(`   ‚è∞ Timestamp: ${result.rows[0].now}`)
    console.log(`   üêò ${result.rows[0].version.split(',')[0]}`)
    console.log('')

    // Verificar tablas
    console.log('2Ô∏è‚É£ Verificando tablas existentes...')
    const tables = await pool.query(`
      SELECT table_name
      FROM information_schema.tables
      WHERE table_schema = 'public'
      ORDER BY table_name
    `)

    const expectedTables = ['users', 'categories', 'tags', 'articles', 'article_tags']
    const existingTables = tables.rows.map(r => r.table_name)

    for (const table of expectedTables) {
      if (existingTables.includes(table)) {
        console.log(`   ‚úÖ Tabla '${table}' existe`)
      } else {
        console.log(`   ‚ùå Tabla '${table}' NO existe`)
      }
    }
    console.log('')

    // Verificar usuarios admin
    console.log('3Ô∏è‚É£ Verificando usuarios admin...')
    const users = await pool.query('SELECT email, is_admin, created_at FROM users WHERE is_admin = true')

    if (users.rows.length > 0) {
      users.rows.forEach(user => {
        console.log(`   ‚úÖ Admin: ${user.email}`)
      })
    } else {
      console.log('   ‚ö†Ô∏è  No hay usuarios admin creados')
    }
    console.log('')

    // Estad√≠sticas
    console.log('4Ô∏è‚É£ Estad√≠sticas de la base de datos:')
    const stats = await pool.query(`
      SELECT
        (SELECT COUNT(*) FROM users) as users,
        (SELECT COUNT(*) FROM categories) as categories,
        (SELECT COUNT(*) FROM tags) as tags,
        (SELECT COUNT(*) FROM articles) as articles
    `)

    const s = stats.rows[0]
    console.log(`   üë• Usuarios: ${s.users}`)
    console.log(`   üìÅ Categor√≠as: ${s.categories}`)
    console.log(`   üè∑Ô∏è  Etiquetas: ${s.tags}`)
    console.log(`   üìÑ Art√≠culos: ${s.articles}`)
    console.log('')

    console.log('‚úÖ ¬°Todas las pruebas completadas exitosamente!')

  } catch (error) {
    console.error('\n‚ùå Error en la conexi√≥n:')
    console.error(error.message)

    if (error.code === 'ECONNREFUSED') {
      console.error('\nüí° El servidor PostgreSQL no est√° respondiendo.')
      console.error('   Verifica que:')
      console.error('   1. PostgreSQL est√© corriendo en el VPS')
      console.error('   2. El puerto 5432 est√© abierto')
      console.error('   3. El host y credenciales sean correctos')
    } else if (error.code === 'ENOTFOUND') {
      console.error('\nüí° No se puede resolver el host.')
      console.error('   Verifica la direcci√≥n IP en DB_HOST')
    }
  } finally {
    await pool.end()
  }
}

testConnection()
